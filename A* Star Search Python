# A* Search
pakistan_map = {
            "Karachi": {"Quetta": 70, "Nawabshah": 190, "Badin": 200},
            "Quetta": {"Nawabshah": 28, "Muzaffargarh": 115},
            "Badin": {"Khairpur": 155},
            "Nawabshah": {"Khairpur": 50},
            "Khairpur": {"Bahawalpur": 90},
            "Muzaffargarh": {"Multan": 90},
            "Bahawalpur": {"Multan":101, "Lahore":133},
            "Multan": {"Faisalabad": 65, "Lahore": 211},
            "Faisalabad": {"Lahore": 71}
            
    }

pakistan_distance_lahore = {
            "Karachi": 366,
            "Lahore": 374,
            "Quetta": 380,
            "Badin": 329,
            "Nawabshah": 244,
            "Muzaffargarh": 241,
            "Multan": 242,
            "Khairpur": 160,
            "Faisalabad": 193,
            "Bahawalpur": 253
         }

class Node:

    def calc_path_cost(self,cost):
        if self.prev != None:
            return self.prev.path_cost + cost
        else:
            return 0
        
    def __init__(self,name,prev,hcost,cost):
        self.name = name
        self.prev = prev
        self.path_cost = self.calc_path_cost(cost)
        self.hcost = hcost
        self.cost = self.path_cost + self.hcost

    def is_equal(self,other_node):
        if self.name == other_node.name:
            return True
        else:
            return False

class myQue:
    def __init__(self,innerList = []):
        self.innerList = innerList

    def push(self,value):
        self.innerList.append(value)

    def pop(self):
        return self.innerList.pop(0)

    def get(self):
        return list(self.innerList)
    
    def empty(self):
        if len(self.innerList)==0:
            return True
        else:
            return False

    def first(self):
        return self.innerList[0]

    def sort_by_function(self,func):
        #print("B: ",end="")
        #for i in self.innerList:
        #    print(i.cost,end=",")
        #print();

        self.innerList = sorted(self.innerList,key = func)

        #print("A: ",end="")
        #for i in self.innerList:
        #    print(i.cost,end=",")
        #print();

def bfs_travel(start):

    def cost_return(x):
        return x.cost

    def staight_line_cost(name):
        return pakistan_distance_lahore[name]
        
    if start not in pakistan_map:
            print("Invalid start or dest")
    else:
        #Bucharest is fixed since no other destination data is available
        dest = "Lahore"
        visited = []
        q = myQue()

        node = Node(start,None,staight_line_cost(start),0)
        q.push(node)

        while q.empty != True:
            now = q.pop()
            if now.name == dest:
                tcost = now.cost
                path = [now.name,]
                while now.prev != None:
                    tcost = now.prev.cost
                    path.append(now.prev.name)
                    now = now.prev
                print("A* Search For Pakistan Map")
                print("Total Cost is: ",tcost)
                print("Path Found: ",list(reversed(path)))
                break
                
            visited.append(now)
                
            fringe = list(pakistan_map[now.name].keys())
            for loc in fringe:
                is_visited = False
                for v in visited:
                    if loc == v.name:
                        is_visited = True

                if is_visited == True:
                    continue
                    
                cost = pakistan_map[now.name][loc]
                node = Node(loc,now,staight_line_cost(loc),cost)
                q.push(node)

            q.sort_by_function(cost_return);
            

start = input("Start from?  ")
dest = input("Destination?  ")
bfs_travel("Karachi")

